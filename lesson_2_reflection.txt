When you initialize a repository it creates a .git item in the directory.  However, no commits are created when you initialize it.

The staging area is where you add the files and then git commit batches all of the files in the staging area for the commit

git diff id1 id2 lets you see the differences between commits, but often you may want to see the difference between what is in the staging area currently and what has been modified in the working directory.  This shows any changes you have made that you have not added to the staging area yet.

a label on commits is called BRANCHES, the main branch is called MASTER, which is created for you when repository is created.

you get to name the other branches ("Italian") or ("Experimental")

you can check out branches, similar to how you check out commits

if you make a new commit while you are in a detached HEAD state, it means that if you commit the changes, but then switch branches, you won't be able to get to the commit again unless you personally saved the commit ID.  This is because the commit was not created on a branch, and each commit finds the one before it in a parent-child like structure.  So being anywhere else will never find your commit again.  So make sure to make a new branch if you want to do that.

A merge has two parents.  If you merge with master, you can delete the other branch because it is no longer needed.  The commits from that branch will still be there though.  When commits are merged, the git log will sort the commits by the time they are created.

Since the commits could be interwoven, if you wanted to do a git diff with the commit, you would need to know what its parent was.  How do you find out?  Use git show

If you want stuff from master into another branch, first checkout the other branch, and then say git merge branch1 branchtomergefrom

If error because of conflict, open the file and find |||| symbols.  Top is your new code in branch1, middle is conflicting section, bottom is new code from other branch.

Git hub is an easy way to share entire repositories.  You need to sync your commit history to GitHub for other people to see.  First make sure that your changes are added to your local repository on your computer.

First get the repository initially into GitHub.  First create an empty repository.  A "remote" is a remote repository that you might want to send and receive commits to and from.  You can push and pull data to remotes.  You usually push branches and it will push all commits on that branch that arent currently in the remote.

You can also make changes in github, and then move them to your computer.

github has a feature called "forking" which lets you copy somebody else's repository github servers without pulling to your machine.  Then you would probably want to pull to your machine to make changes.  

If you want someone to collaborate, add them to the collaborators section under GitHub

If there is commits in both your local branch of a repository and a remote branch, you probably want to merge them similar to before

If you update local repository branch and not remote, the origin/master will still point to the last known location of the remote.  The way you would update this information is to push the remote again.  origin/master is the local copy of the remote branch

fetching lets you update the local copy of the remote branch with the remote branches without changing the actual local branch, then you could merge them if you wanted.  So if the remote has commit A and local has B, before git fetch 

A fast forward merge is when the branch you are merging to is an ancestor of the branch you are merging from.

If you want to make a change in collaborated project and get feedback: Start by making a new local branch to make the change in.  Then checkout that branch, then make changes and commit them to the branch. Then push the branch to the remote, where it will change add a branch to the remote so you don't change remote's master branch.  Then later you can merge the master and new branch on github.   Submit a pull request or "merge request" to let the other person to see your new branch and the differences and then add the merge.

if you made a fork of an original repository, and then the original changes, you will need to pull info to your local to resolve conflicts.  To do this make the original repository with a remote called "upstream"  This adds labels such as upstream/master  Then after the changes are made, you can push up to your fork